package com.azure.storage.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobServiceClient;
import com.azure.storage.blob.models.BlobItem;
import com.azure.storage.constants.StorageConstants;

@Component
public class StorageService {

	@Autowired
	BlobServiceClient blobServiceClient;
	
	public ResponseEntity createContainer(String containerName) {
			BlobContainerClient blobContainerClient = blobServiceClient.createBlobContainer(containerName);
			//blobContainerClient.create();
			return ResponseEntity.created(URI.create("")).body(containerName+" created");
	}
	
	public ResponseEntity uploadBlob(MultipartFile file, String containerName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);

		BlobClient blobClient = blobContainerClient.getBlobClient(file.getOriginalFilename());
		try {
			blobClient.upload(file.getInputStream(), file.getSize());
			return ResponseEntity.created(URI.create("")).body(file.getOriginalFilename()+" uploaded to "+containerName);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	public ResponseEntity listBlobs(String containerName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
		List<String> blobLists = new ArrayList<String>();
		for(BlobItem blobItem : blobContainerClient.listBlobs()) {
			blobLists.add(blobItem.getName());
		}
		return ResponseEntity.accepted().body(blobLists);
	}
	
	public ResponseEntity deleteContainer(String containerName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
		blobContainerClient.delete();
		return ResponseEntity.ok(containerName+" is deleted");
	}
	
	public ResponseEntity deleteBlob(String containerName, String blobName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
		BlobClient blobClient =  blobContainerClient.getBlobClient(blobName);
		blobClient.delete();
		return ResponseEntity.ok(blobName+" deleted from container "+containerName);
	}
	
	public ResponseEntity<byte[]> downloadBlob(String containerName, String blobName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
		BlobClient blobClient =  blobContainerClient.getBlobClient(blobName);
		ByteArrayOutputStream outStream = new ByteArrayOutputStream();
		blobClient.download(outStream);
		byte[] bytes = outStream.toByteArray();
		
		return ResponseEntity.ok().body(bytes);
	}
	
}
