package com.azure.storage.service;

import java.io.IOException;
import java.net.URI;
import java.time.Instant;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.RequestEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobServiceClient;
import com.azure.storage.blob.models.BlobItem;
import com.azure.storage.constants.StorageConstants;

@Component
public class StorageService {

	@Autowired
	BlobServiceClient blobServiceClient;
	
	@Autowired
	RestTemplate restTemplate;
	
	public void createContainer(String containerName) {
		try {
			BlobContainerClient blobContainerClient = blobServiceClient.createBlobContainer(containerName);
			blobContainerClient.create();
			System.out.println("blobContainerClient : "+blobContainerClient);
			
		} catch(Exception e) {
			System.out.println("exception : "+e);
		}
		
	}
	
	public void uploadBlob(MultipartFile file, String containerName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);

		BlobClient blobClient = blobContainerClient.getBlobClient(file.getOriginalFilename());
		try {
			blobClient.upload(file.getInputStream(), file.getSize());
		} catch (IOException e) {
			System.out.println("exception : "+e.getMessage());
		}
	}
	
	public void listBlobs(String containerName) {
		BlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(containerName);
		
		for(BlobItem blobItem : blobContainerClient.listBlobs()) {
			System.out.println(blobItem.getName());
		}
	}
	
	public void createRestContainer(String containerName) {
		String url = String.format(StorageConstants.CONTAINER_CREATE_URI, StorageConstants.STORAGE_ACCOUNT_NAME, containerName);
		RequestEntity entity = RequestEntity.put(URI.create(url)).headers(buildHeaders()).build();
		restTemplate.exchange(entity, Class.class);
		
		
	        
	}
	private HttpHeaders buildHeaders() {
		HttpHeaders headers = new HttpHeaders();
		
		 StringBuilder sb = new StringBuilder();
	        sb.append("PUT\n"); // method
	        sb.append('\n'); // content encoding
	        sb.append('\n'); // content language
	        sb.append('\n'); // content length
	        sb.append('\n'); // md5 (optional)
	        sb.append('\n'); // content type
	        sb.append('\n'); // legacy date
	        sb.append('\n'); // if-modified-since
	        sb.append('\n'); // if-match
	        sb.append('\n'); // if-none-match
	        sb.append('\n'); // if-unmodified-since
	        sb.append('\n'); // range
	        sb.append("x-ms-date:" + Instant.now() + '\n'); // headers
	        sb.append("x-ms-version:2009-09-19\n");
	        sb.append("/" + StorageConstants.STORAGE_ACCOUNT_NAME+ url);
	        try {

		        Mac mac = Mac.getInstance("HmacSHA256");
		        mac.init(new SecretKeySpec(Base64.getDecoder().decode(StorageConstants.ACCESS_KEY), "HmacSHA256"));
		        String authKey = new String(Base64.getEncoder().encode(mac.doFinal(sb.toString().getBytes("UTF-8"))));
		        String auth = "SharedKey "+StorageConstants.STORAGE_ACCOUNT_NAME+":"+ authKey;
	        } catch(Exception e) {
	        	System.out.println(e.getMessage());
	        }
		return headers;
	}

	public void uploadRestBlob(MultipartFile file, String containerName) {
		
	}
	
	public void listRestBlobs(String containerName) {
		
	}
}
